import time

#using recursion, however not veyr well optimized overall

#n represents which position in the fibonacci sequence the number is 
def FibonacciRecursive(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return FibonacciRecursive(n-2) + FibonacciRecursive(n-1)

#use dynamic programming instead 

FibArray = [0,1]

def FibonacciDynamic(n):
    if n < 0:
        print("Incorrect Input")
    elif n == 0:
        return FibArray[0]
    elif n <= len(FibArray) - 1:
        return FibArray[n]
    else: 
        temp_fib = FibonacciDynamic(n-2) + FibonacciDynamic(n-1)
        FibArray.append(temp_fib)
        return temp_fib


#Space optimized
def FibonacciSpace(): 
    return

# for i in range(0,20):
#     print(FibonacciRecursive(i))
#     print(FibonacciDynamic(i))


#Fibonacci Dynamic
FibArray2 = [0,1]

def FibonacciDynamic2(num):
    #Handle edge cases first
    if(num < 0):
        print('Invalid Inpit')
        return
    elif(num == 0): 
        return FibArray2[0]
    elif(num <= len(FibArray2) - 1): #return element if in array 
        return FibArray2[num]
    else: #Calculate the missing values 
        return FibonacciDynamic2(num - 2) + FibonacciDynamic2(num - 1)


print(FibonacciDynamic2(33))



    


#Trying to make separate threads to compare run time between the functions

# Define a function for the thread
# def print_time( threadName, delay):
#     count = 0
#     while count < 5:
#         time.sleep(delay)
#         count += 1
#         print ("%s: %s" % ( threadName, time.ctime(time.time()) ))

# # Create two threads as follows
# try:
#     thread.start_new_thread( print_time, ("Thread-1", 2, ) )
#     thread.start_new_thread( print_time, ("Thread-2", 4, ) )
#     thread.start_new_thread( FibonacciDynamic(20) )
# except:
#     print ("Error: unable to start thread")

# while 1:
#     pass


# return sum([{'M':1000,"D":500,"C":100,"L":50,"X":10,"V":5,"I":1}[i] 
# for i in s.replace("IV", "IIII").replace("IX", "VIIII").replace("XL", "XXXX").replace("XC", "LXXXX").replace("CD", "CCCC").replace("CM", "DCCCC")])


FibList = [0,1]
def FibonacciDynamic3(ind):
    if(ind < 0):
        return None
    if(ind <= len(FibList) - 1):
        return FibList[ind]
    
    val = FibonacciDynamic3(ind - 1) + FibonacciDynamic3(ind - 2)
    FibList.append(val)
    return val

print(FibonacciDynamic3(4))

#I keep forgetting to append the value to the array which is the whole point of 
#using dynamic programming here
#other than that, it should work in general