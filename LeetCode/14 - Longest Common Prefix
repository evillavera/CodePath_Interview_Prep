#not the most efficient, I think time complexity of O(Log N * N^2)
#I am sorting and go through 2 for loops 
#Strs is a List element with strings inside
def longestCommonPrefix(strs):
    #Make sure we have elements to compare with 
    if len(strs) < 2:
        return strs[0]
    
    result = ""
    iterator = 0

    strs.sort(key = len) #sort by length from shortest to longest
    #We sort by shortest to longest because the prefix can be at most the length of 
    #the shortest string in a list, so good place to compare
    print(strs)
    shortestWord = strs[0]
    
    for i in range(0, len(shortestWord)):
        for j in range(1, len(strs)):
            if shortestWord[i] not in (strs[j])[i]:
                return result
        result += shortestWord[i]
    
    return result

strs = ["flower","flow","flight"]
strs2 = ["dog","racecar","car"]
strs3 = ["a"]
strs4 = ["yellowbird", "yellowcard", "yellowcity", "yellow", "yellow color"]
# print(longestCommonPrefix(strs))
# print(longestCommonPrefix(strs2))
# print(longestCommonPrefix(strs3))
# print(longestCommonPrefix(strs4))

#Alternative Solutions
def longestCommonPrefix2(strs):
    prefix=""
    if len(strs)==0: return prefix
    
    for i in xrange(len(min(strs))):
        c=strs[0][i]
        if all(a[i]==c for a in strs):
            prefix+=c
        else:
            break
    return prefix

#This is a clever solution because what sorting the array here does is 
#It sorts alphabetically, meaning you would only need to check the first 
#and last element. If they are similar then we can assume that all the other elements
#in between share the same letters since we sorted alphabetically
#strs[-1] means look at the last element

def longestCommonPrefix3(strs):
    """
    :type strs: List[str]
    :rtype: str
    """
    if len(strs) == 0:
        return '' 
    res = ''
    strs = sorted(strs)
    print(strs)
    for i in strs[0]:
        if strs[-1].startswith(res+i):
            res += i
        else:
            break
    return res

print(longestCommonPrefix3(["accc","aab","aab"]))
print(longestCommonPrefix3(strs))
print(longestCommonPrefix3(strs2))
print(longestCommonPrefix3(strs3))
print(longestCommonPrefix3(strs4))